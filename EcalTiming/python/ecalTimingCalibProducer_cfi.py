import FWCore.ParameterSet.Config as cms

timing = cms.EDFilter("EcalTimingCalibProducer",
                    isSplash = cms.bool(False),
                    makeEventPlots = cms.bool(False),
                    applyAmpThresEB = cms.bool(True),
                    applyAmpThresEE = cms.bool(True),
                    ebUncalibRechits = cms.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
                    eeUncalibRechits = cms.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
                    timingCollection = cms.InputTag("EcalTimingEvents"),
                    recHitMinimumN = cms.uint32(2),
                    minRecHitEnergyStep = cms.double(0.5),
                    minRecHitEnergyNStep = cms.double(10),
                    energyThresholdOffsetEE = cms.double(0.0),
                    energyThresholdOffsetEB = cms.double(0.0),
                    ampFrac = cms.double(0.5),
                    #ampCut_barrelP = cms.vdouble(15.31759, 15.33355, 15.34853, 15.36281, 15.37667, 15.39011, 15.40334, 15.41657, 15.42994, 15.44359, 15.45759, 15.47222, 15.48748, 15.50358, 15.52052, 15.53844, 15.55755, 15.57778, 15.59934, 15.62216, 15.64645, 15.67221, 15.69951, 15.72849, 15.75894, 15.79121, 15.82502, 15.86058, 15.89796, 15.93695, 15.97783, 16.02025, 16.06442, 16.11041, 16.15787, 16.20708, 16.25783, 16.31026, 16.36409, 16.41932, 16.47602, 16.53384, 16.5932, 16.65347, 16.715, 16.77744, 16.84086, 16.90505, 16.97001, 17.03539, 17.10147, 17.16783, 17.23454, 17.30146, 17.36824, 17.43502, 17.50159, 17.56781, 17.63354, 17.69857, 17.76297, 17.82625, 17.88862, 17.94973, 18.00951, 18.06761, 18.12403, 18.1787, 18.23127, 18.28167, 18.32955, 18.37491, 18.41754, 18.45723, 18.49363, 18.52688, 18.55642, 18.58218, 18.60416, 18.62166, 18.63468, 18.64315, 18.64665, 18.6449, 18.6379),
                    ampCut_barrelP = cms.vdouble(16.31759, 16.33355, 16.34853, 16.36281, 16.37667, 16.39011, 16.40334, 16.41657, 16.42994, 16.44359, 16.45759, 16.47222, 16.48748, 16.50358, 16.52052, 16.53844, 16.55755, 16.57778, 16.59934, 16.62216, 16.64645, 16.67221, 16.69951, 16.72849, 16.75894, 16.79121, 16.82502, 16.86058, 16.89796, 16.93695, 16.97783, 17.02025, 17.06442, 17.11041, 17.15787, 17.20708, 17.25783, 17.31026, 17.36409, 17.41932, 17.47602, 17.53384, 17.5932, 17.65347, 17.715, 17.77744, 17.84086, 17.90505, 17.97001, 18.03539, 18.10147, 18.16783, 18.23454, 18.30146, 18.36824, 18.43502, 18.50159, 18.56781, 18.63354, 18.69857, 18.76297, 18.82625, 18.88862, 18.94973, 19.00951, 19.06761, 19.12403, 19.1787, 19.23127, 19.28167, 19.32955, 19.37491, 19.41754, 19.45723, 19.49363, 19.52688, 19.55642, 19.58218, 19.60416, 19.62166, 19.63468, 19.64315, 19.64665, 19.6449, 19.6379),
                    #ampCut_barrelP = cms.vdouble(17.31759, 17.33355, 17.34853, 17.36281, 17.37667, 17.39011, 17.40334, 17.41657, 17.42994, 17.44359, 17.45759, 17.47222, 17.48748, 17.50358, 17.52052, 17.53844, 17.55755, 17.57778, 17.59934, 17.62216, 17.64645, 17.67221, 17.69951, 17.72849, 17.75894, 17.79121, 17.82502, 17.86058, 17.89796, 17.93695, 17.97783, 18.02025, 18.06442, 18.11041, 18.15787, 18.20708, 18.25783, 18.31026, 18.36409, 18.41932, 18.47602, 18.53384, 18.5932, 18.65347, 18.715, 18.77744, 18.84086, 18.90505, 18.97001, 19.03539, 19.10147, 19.16783, 19.23454, 19.30146, 19.36824, 19.43502, 19.50159, 19.56781, 19.63354, 19.69857, 19.76297, 19.82625, 19.88862, 19.94973, 20.00951, 20.06761, 20.12403, 20.1787, 20.23127, 20.28167, 20.32955, 20.37491, 20.41754, 20.45723, 20.49363, 20.52688, 20.55642, 20.58218, 20.60416, 20.62166, 20.63468, 20.64315, 20.64665, 20.6449, 20.6379),
                    #ampCut_barrelM = cms.vdouble(15.31759, 15.33355, 15.34853, 15.36281, 15.37667, 15.39011, 15.40334, 15.41657, 15.42994, 15.44359, 15.45759, 15.47222, 15.48748, 15.50358, 15.52052, 15.53844, 15.55755, 15.57778, 15.59934, 15.62216, 15.64645, 15.67221, 15.69951, 15.72849, 15.75894, 15.79121, 15.82502, 15.86058, 15.89796, 15.93695, 15.97783, 16.02025, 16.06442, 16.11041, 16.15787, 16.20708, 16.25783, 16.31026, 16.36409, 16.41932, 16.47602, 16.53384, 16.5932, 16.65347, 16.715, 16.77744, 16.84086, 16.90505, 16.97001, 17.03539, 17.10147, 17.16783, 17.23454, 17.30146, 17.36824, 17.43502, 17.50159, 17.56781, 17.63354, 17.69857, 17.76297, 17.82625, 17.88862, 17.94973, 18.00951, 18.06761, 18.12403, 18.1787, 18.23127, 18.28167, 18.32955, 18.37491, 18.41754, 18.45723, 18.49363, 18.52688, 18.55642, 18.58218, 18.60416, 18.62166, 18.63468, 18.64315, 18.64665, 18.6449, 18.6379),
                    ampCut_barrelM = cms.vdouble(16.31759, 16.33355, 16.34853, 16.36281, 16.37667, 16.39011, 16.40334, 16.41657, 16.42994, 16.44359, 16.45759, 16.47222, 16.48748, 16.50358, 16.52052, 16.53844, 16.55755, 16.57778, 16.59934, 16.62216, 16.64645, 16.67221, 16.69951, 16.72849, 16.75894, 16.79121, 16.82502, 16.86058, 16.89796, 16.93695, 16.97783, 17.02025, 17.06442, 17.11041, 17.15787, 17.20708, 17.25783, 17.31026, 17.36409, 17.41932, 17.47602, 17.53384, 17.5932, 17.65347, 17.715, 17.77744, 17.84086, 17.90505, 17.97001, 18.03539, 18.10147, 18.16783, 18.23454, 18.30146, 18.36824, 18.43502, 18.50159, 18.56781, 18.63354, 18.69857, 18.76297, 18.82625, 18.88862, 18.94973, 19.00951, 19.06761, 19.12403, 19.1787, 19.23127, 19.28167, 19.32955, 19.37491, 19.41754, 19.45723, 19.49363, 19.52688, 19.55642, 19.58218, 19.60416, 19.62166, 19.63468, 19.64315, 19.64665, 19.6449, 19.6379),
                    #ampCut_barrelM = cms.vdouble(17.31759, 17.33355, 17.34853, 17.36281, 17.37667, 17.39011, 17.40334, 17.41657, 17.42994, 17.44359, 17.45759, 17.47222, 17.48748, 17.50358, 17.52052, 17.53844, 17.55755, 17.57778, 17.59934, 17.62216, 17.64645, 17.67221, 17.69951, 17.72849, 17.75894, 17.79121, 17.82502, 17.86058, 17.89796, 17.93695, 17.97783, 18.02025, 18.06442, 18.11041, 18.15787, 18.20708, 18.25783, 18.31026, 18.36409, 18.41932, 18.47602, 18.53384, 18.5932, 18.65347, 18.715, 18.77744, 18.84086, 18.90505, 18.97001, 19.03539, 19.10147, 19.16783, 19.23454, 19.30146, 19.36824, 19.43502, 19.50159, 19.56781, 19.63354, 19.69857, 19.76297, 19.82625, 19.88862, 19.94973, 20.00951, 20.06761, 20.12403, 20.1787, 20.23127, 20.28167, 20.32955, 20.37491, 20.41754, 20.45723, 20.49363, 20.52688, 20.55642, 20.58218, 20.60416, 20.62166, 20.63468, 20.64315, 20.64665, 20.6449, 20.6379),
                    #ampCut_endcapP = cms.vdouble(15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0),
                    ampCut_endcapP = cms.vdouble(16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0),
                    #ampCut_endcapP = cms.vdouble(17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0),
                    #ampCut_endcapM = cms.vdouble(15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0),
                    #ampCut_endcapM = cms.vdouble(16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0),
                    #ampCut_endcapM = cms.vdouble(17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0),
                    eThresholdsEB = cms.vdouble(
        1.00751, 1.01408, 1.01886, 1.02209, 1.02395, 1.02462, 1.02426, 1.02301, 1.02099, 1.01832,
        1.01508, 1.01139, 1.00731, 1.00292, 0.998285, 0.993462, 0.988504, 0.983455, 0.978355, 0.973239,
        0.968136, 0.963071, 0.958066, 0.953138, 0.948299, 0.943562, 0.938933, 0.934416, 0.930016, 0.925731,
        0.92156, 0.917501, 0.913549, 0.909699, 0.905944, 0.902278, 0.898694, 0.895184, 0.89174, 0.888355,
        0.885023, 0.881736, 0.878489, 0.875276, 0.872093, 0.868936, 0.865802, 0.862691, 0.859601, 0.856534,
        0.853489, 0.850472, 0.847485, 0.844534, 0.841625, 0.838765, 0.835961, 0.833224, 0.830561, 0.827984,
        0.825503, 0.823129, 0.820872, 0.818743, 0.816752, 0.814909, 0.813222, 0.811699, 0.810346, 0.809167,
        0.808164, 0.807336, 0.80668, 0.806189, 0.805852, 0.805656, 0.805582, 0.805606, 0.8057, 0.805828,
        0.805952, 0.806024, 0.80599, 0.805788, 0.805348, 0.805309, 0.80571, 0.805873, 0.805868, 0.805758,
        0.805595, 0.805427, 0.805295, 0.805232, 0.805267, 0.805424, 0.805722, 0.806174, 0.806791, 0.80758,
        0.808543, 0.809683, 0.810995, 0.812478, 0.814124, 0.815926, 0.817876, 0.819964, 0.822179, 0.824511,
        0.82695, 0.829484, 0.832104, 0.834798, 0.837558, 0.840375, 0.84324, 0.846146, 0.849088, 0.852061,
        0.85506, 0.858082, 0.861126, 0.864191, 0.867278, 0.870389, 0.873525, 0.876691, 0.879891, 0.88313,
        0.886414, 0.889751, 0.893146, 0.896607, 0.900142, 0.903758, 0.907462, 0.911262, 0.915162, 0.91917,
        0.923288, 0.92752, 0.931867, 0.936329, 0.940904, 0.945586, 0.950368, 0.95524, 0.960188, 0.965195,
        0.97024, 0.975298, 0.980339, 0.985329, 0.990229, 0.994993, 0.99957, 1.0039, 1.00792, 1.01156,
        1.01474, 1.01737, 1.01934, 1.02054, 1.02085, 1.02014, 1.01824, 1.01499, 1.01018, 1.00359        
                    ), 
                    parAThresholds_endcap = cms.vdouble(10, 0.945), # B + A*ring 2018 thr are defined as two linear cut (one for iring<30 and one above)
                    parBThresholds_endcap = cms.vdouble(150, -21.865),# B + A*ring 2018 thr are defined as two linear cut (one for iring<30 and one above)
                    minEntries = cms.uint32(1),
                    globalOffset = cms.double(0.),
                    storeEvents = cms.bool(False),
                    produceNewCalib = cms.bool(True),
                    outputDumpFile = cms.string('output.dat'),
                    maxSkewnessForDump = cms.double(2),
		    ph_sign_corr = cms.double(0.)
                    )
